Configure automatic deployment of Azure Database

  Describe deployment models in Azure
    Azure Resource Manager templates have the benefit of being able to deploy a full set of resources in one single declarative template. You can build dependencies into the templates, as well as using parameters to change deployment values at deployment time. Once you have a template, you can deploy it several ways including using an Azure DevOps pipeline, or through the custom deployments blade in the Azure portal. The benefit of these deployments is that they use a declarative model, which defines what should be created. The Azure Resource Manager framework then determines how to deploy it. The alternative to the declarative model is the imperative model. Imperative frameworks include PowerShell and the Azure CLI, which follow a prescriptive order of tasks to be executed.

    there are two programming models that are used for cloud deployments: imperative and declarative.

    Azure Resource Manager Templates
      Azure Resource Manager templates allow you to create and deploy an entire infrastructure in a declarative framework. For example, you can deploy not only a virtual machine, but its network and storage dependencies in one document. Resource Manager also supports orchestration, which manages the deployment of interdependent resources so that they are created in the correct order. For example, a VM is dependent on the existence of a virtual network, so the framework will deploy the network (or check for the existence of the network) before attempting to build the VM.

    PowerShell
      PowerShell provides a core module known as Az, which has child resource providers for nearly all Azure services. For example, 'Az.Compute' would cover Azure Virtual Machines. PowerShell is more commonly used for resource modification and status retrieval. While it is possible to create resources using PowerShell, it is not typically used for complex deployments. PowerShell can also be used to deploy Azure Resource Manager templates, so in a sense it supports both declarative and imperative models.

    Azure CLI
      The Azure Command Line Interface, or CLI, is similar to PowerShell in that it can be used either imperatively or declaratively. Much like PowerShell and Azure Resource Manager templates, the Azure CLI provides a mechanism to deploy or modify Azure Resources. Some commands for Azure PostgreSQL and Azure MySQL Databases are only available in the Azure CLI.

   Azure Portal
      The Azure portal is a graphical interface to Azure Azure Resource Manager. Any resources you build and deploy using the portal will have an Azure Resource Manager template that you can capture by clicking "Export Template" in the Settings Blade.

   Deploying an Azure Resource Manager template with PowerShell and CLI
      With PowerShell, you have several options for the scope of your deployment. You can deploy to a resource group, a subscription, a Management Group (a collection of subscriptions under the same Azure template and commonly used in large enterprise deployments), or a tenant. Azure Resource Manager templates are parameterized, and you will need to pass in parameters, either inline or through the use of a parameter file as shown in the example below.

      New-AzResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName ExampleResourceGroup `

      -TemplateFile c:\MyTemplates\azuredeploy.json `

      -TemplateParameterFile c:\MyTemplates\storage.parameters.json

    Deploying an Azure Resource Manager template with Azure CLI
      The Azure CLI allows the same options for deployment scope as you have with PowerShell. Also, like with PowerShell, you can use a local or remote parameter file and template, as shown in the example below.

      az deployment group create --resource-group SampleRG --template-file '\path\template.json'

    Using Azure DevOps to deploy templates
      In Azure DevOps, deployments are carried out using Azure Pipelines. Azure Pipelines are a fully featured continuous integration and continuous delivery service (CI/CD), which allows you to automate the build, testing, and deployment of your code. You can deploy Azure resources using Azure Resource Manager templates in two ways... The first method calls a PowerShell script as shown above. The second approach defines tasks that stage your artifacts (the templates themselves and any required secrets) and then deploys the templates. One task stages the artifacts and the other tasks deploys the templates.

    Continuous Integration
      Continuous integration is a development methodology that focused on making small changes to code and frequent code check-ins to the version control system. Continuous integration provides an automated way to build, package, and test applications. Having the framework in place facilitates more frequent check-ins, and allows better collaboration between developers, with the goal of improving code quality. Continuous delivery builds on the continuous integration and automates the delivery of code changes to the underlying infrastructure.

  Create an Azure Resource Manager template
    An Azure Resource Manager template is a JSON (JavaScript Object Notation) document that describes the resources that will be deployed within an Azure Resource Group. The structure of these templates is shown below.

      {

       "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",

       "contentVersion": "",

       "apiProfile": "",

       "parameters": { },

       "variables": { },

       "functions": [ ],

       "resources": [ ],

       "outputs": { }

      }

    The schema file, which is referenced on the first line the above example describes the version of the template language. This file is supplied by Microsoft to define the Azure API. The content version number is only defined by you as needed, and should align with your internal versioning standard. The API profile serves as a collection of API versions for this environment. This is especially useful when deploying resources to different environments like national clouds and commercial clouds, which may have differing resource providers. Parameters are values that are provided to the template in order to customize resources at deployment time, whereas variables are values that are used as JSON fragments to simplify template language expressions. You can also include user-defined functions within the template. The resource component defines what resources are getting defined in the template. The resources are the resource types that you are deploying.

  Deploy an Azure Resource Manager template
